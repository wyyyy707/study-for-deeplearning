#1.卷积层
从输入的图像或特征图中提取局部特征，逐步构建图像的高级特征。
self.conv1 = nn.Conv2d(1, 6, kernel_size=5)
#参数： in_channels = 1/3，out_channels（常见的做法是逐渐增加输出通道的数量，以提取更复杂的特征），kernel_size（卷积核），padding（填充），bias（偏置项）
Examples:

        >>> # With square kernels and equal stride
        >>> m = nn.Conv2d(16, 33, 3, stride=2)
        >>> # non-square kernels and unequal stride and with padding
        >>> m = nn.Conv2d(16, 33, (3, 5), stride=(2, 1), padding=(4, 2))
        >>> # non-square kernels and unequal stride and with padding and dilation
        >>> m = nn.Conv2d(16, 33, (3, 5), stride=(2, 1), padding=(4, 2), dilation=(3, 1))
        >>> input = torch.randn(20, 16, 50, 100)
        >>> output = m(input)
input = torch.randn(20, 16, 50, 100)>>> batch_size,inchannels,height,width
#2.池化层
减少特征图的空间尺寸（即减少宽度和高度）。池化层有助于减小计算量并增强特征的局部不变性。
self.pool = nn.MaxPool2d(2, 2)
最大池化层，kernel_size，stride，padding
